"use strict";var ApplicationConfiguration=function(){var applicationModuleName="chessevents",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("calendaritems"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("organisers"),ApplicationConfiguration.registerModule("players"),ApplicationConfiguration.registerModule("users"),angular.module("calendaritems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Events","calendaritems","dropdown","/calendaritems(/create)?"),Menus.addSubMenuItem("topbar","calendaritems","List Events","calendaritems"),Menus.addSubMenuItem("topbar","calendaritems","New Event","calendaritems/create")}]),angular.module("calendaritems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCalendaritems",{url:"/calendaritems",templateUrl:"modules/calendaritems/views/list-calendaritems.client.view.html"}).state("createCalendaritem",{url:"/calendaritems/create",templateUrl:"modules/calendaritems/views/create-calendaritem.client.view.html"}).state("viewCalendaritem",{url:"/calendaritems/:calendaritemId",templateUrl:"modules/calendaritems/views/view-calendaritem.client.view.html"}).state("editCalendaritem",{url:"/calendaritems/:calendaritemId/edit",templateUrl:"modules/calendaritems/views/edit-calendaritem.client.view.html"})}]),angular.module("calendaritems").controller("CalendaritemsController",["$scope","$stateParams","$location","Authentication","Calendaritems","Organisers",function($scope,$stateParams,$location,Authentication,Calendaritems,Organisers){$scope.authentication=Authentication,$scope.organisers=Organisers.query(),$scope.create=function(){var calendaritem=new Calendaritems({name:this.name,description:this.description,headline:this.headline,organiser:this.organiser,start:this.start,end:this.end});calendaritem.$save(function(response){$location.path("calendaritems/"+response._id),$scope.name="",$scope.description="",$scope.headline="",$scope.start=Date.now,$scope.end=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(calendaritem){if(calendaritem){calendaritem.$remove();for(var i in $scope.calendaritems)$scope.calendaritems[i]===calendaritem&&$scope.calendaritems.splice(i,1)}else $scope.calendaritem.$remove(function(){$location.path("calendaritems")})},$scope.update=function(){var calendaritem=$scope.calendaritem;calendaritem.$update(function(){$location.path("calendaritems/"+calendaritem._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.calendaritems=Calendaritems.query()},$scope.findOne=function(){$scope.calendaritem=Calendaritems.get({calendaritemId:$stateParams.calendaritemId}),console.log("item: "+$scope.calendaritem)}}]),angular.module("calendaritems").factory("Calendaritems",["$resource",function($resource){return $resource("calendaritems/:calendaritemId",{calendaritemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Calendaritems",function($scope,Authentication,Calendaritems){$scope.authentication=Authentication,$scope.calendaritems=Calendaritems.query()}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("organisers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Organisers","organisers","dropdown","/organisers(/create)?"),Menus.addSubMenuItem("topbar","organisers","List Organisers","organisers"),Menus.addSubMenuItem("topbar","organisers","New Organiser","organisers/create")}]),angular.module("organisers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOrganisers",{url:"/organisers",templateUrl:"modules/organisers/views/list-organisers.client.view.html"}).state("createOrganiser",{url:"/organisers/create",templateUrl:"modules/organisers/views/create-organiser.client.view.html"}).state("viewOrganiser",{url:"/organisers/:organiserId",templateUrl:"modules/organisers/views/view-organiser.client.view.html"}).state("editOrganiser",{url:"/organisers/:organiserId/edit",templateUrl:"modules/organisers/views/edit-organiser.client.view.html"})}]),angular.module("organisers").controller("OrganisersController",["$scope","$stateParams","$location","Authentication","Organisers",function($scope,$stateParams,$location,Authentication,Organisers){$scope.authentication=Authentication,$scope.create=function(){var organiser=new Organisers({name:this.name,email:this.email,telephone:this.telephone});organiser.$save(function(response){$location.path("organisers/"+response._id),$scope.name="",$scope.email="",$scope.telephone=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(organiser){if(organiser){organiser.$remove();for(var i in $scope.organisers)$scope.organisers[i]===organiser&&$scope.organisers.splice(i,1)}else $scope.organiser.$remove(function(){$location.path("organisers")})},$scope.update=function(){var organiser=$scope.organiser;organiser.$update(function(){$location.path("organisers/"+organiser._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.organisers=Organisers.query()},$scope.findOne=function(){$scope.organiser=Organisers.get({organiserId:$stateParams.organiserId})}}]),angular.module("organisers").factory("Organisers",["$resource",function($resource){return $resource("organisers/:organiserId",{organiserId:"@_id"},{update:{method:"PUT"}})}]),angular.module("players").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Players","players","dropdown","/players(/create)?"),Menus.addSubMenuItem("topbar","players","List Players","players"),Menus.addSubMenuItem("topbar","players","New Player","players/create")}]),angular.module("players").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPlayers",{url:"/players",templateUrl:"modules/players/views/list-players.client.view.html"}).state("createPlayer",{url:"/players/create",templateUrl:"modules/players/views/create-player.client.view.html"}).state("viewPlayer",{url:"/players/:playerId",templateUrl:"modules/players/views/view-player.client.view.html"}).state("editPlayer",{url:"/players/:playerId/edit",templateUrl:"modules/players/views/edit-player.client.view.html"})}]),angular.module("players").controller("PlayersController",["$scope","$stateParams","$location","Authentication","Players",function($scope,$stateParams,$location,Authentication,Players){$scope.authentication=Authentication,$scope.create=function(){var player=new Players({name:this.name});player.$save(function(response){$location.path("players/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(player){if(player){player.$remove();for(var i in $scope.players)$scope.players[i]===player&&$scope.players.splice(i,1)}else $scope.player.$remove(function(){$location.path("players")})},$scope.update=function(){var player=$scope.player;player.$update(function(){$location.path("players/"+player._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.players=Players.query()},$scope.findOne=function(){$scope.player=Players.get({playerId:$stateParams.playerId})}}]),angular.module("players").factory("Players",["$resource",function($resource){return $resource("players/:playerId",{playerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);